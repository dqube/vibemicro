<?xml version="1.0" encoding="utf-8"?>
<Project>

  <!-- Define BuildingBlocks project reference paths -->
  <PropertyGroup>
    <DomainProject>$(MSBuildThisFileDirectory)BuildingBlocks.Domain\BuildingBlocks.Domain.csproj</DomainProject>
    <ApplicationProject>$(MSBuildThisFileDirectory)BuildingBlocks.Application\BuildingBlocks.Application.csproj</ApplicationProject>
    <InfrastructureProject>$(MSBuildThisFileDirectory)BuildingBlocks.Infrastructure\BuildingBlocks.Infrastructure.csproj</InfrastructureProject>
    <APIProject>$(MSBuildThisFileDirectory)BuildingBlocks.API\BuildingBlocks.API.csproj</APIProject>
  </PropertyGroup>

  <!-- BuildingBlocks Package Metadata Configuration -->
  <PropertyGroup Condition="$(MSBuildProjectFullPath.Contains('BuildingBlocks')) and $(MSBuildProjectName.EndsWith('API'))">
    <PackageId>BuildingBlocks.API</PackageId>
    <Description>API layer building blocks for .NET applications following Clean Architecture principles</Description>
    <PackageTags>api;web;aspnetcore;clean-architecture;building-blocks</PackageTags>
  </PropertyGroup>

  <PropertyGroup Condition="$(MSBuildProjectFullPath.Contains('BuildingBlocks')) and $(MSBuildProjectName.EndsWith('Application'))">
    <PackageId>BuildingBlocks.Application</PackageId>
    <Description>Application layer building blocks for .NET applications following Clean Architecture principles</Description>
    <PackageTags>application;cqrs;mediator;clean-architecture;building-blocks</PackageTags>
  </PropertyGroup>

  <PropertyGroup Condition="$(MSBuildProjectFullPath.Contains('BuildingBlocks')) and $(MSBuildProjectName.EndsWith('Domain'))">
    <PackageId>BuildingBlocks.Domain</PackageId>
    <Description>Domain layer building blocks for .NET applications following Clean Architecture principles</Description>
    <PackageTags>domain;ddd;entities;value-objects;clean-architecture;building-blocks</PackageTags>
  </PropertyGroup>

  <PropertyGroup Condition="$(MSBuildProjectFullPath.Contains('BuildingBlocks')) and $(MSBuildProjectName.EndsWith('Infrastructure'))">
    <PackageId>BuildingBlocks.Infrastructure</PackageId>
    <Description>Infrastructure layer building blocks for .NET applications following Clean Architecture principles</Description>
    <PackageTags>infrastructure;repository;data-access;clean-architecture;building-blocks</PackageTags>
  </PropertyGroup>

  <!-- Clean Architecture Project Dependencies -->
  <Target Name="AddCleanArchitectureReferences" BeforeTargets="CollectPackageReferences">

    <!-- BuildingBlocks Domain layer - no dependencies on other layers -->
    <ItemGroup Condition="$(MSBuildProjectFullPath.Contains('BuildingBlocks')) and $(MSBuildProjectName.EndsWith('Domain'))">
      <!-- Domain has no project dependencies -->
    </ItemGroup>
    
    <!-- BuildingBlocks Application layer - depends on Domain -->
    <ItemGroup Condition="$(MSBuildProjectFullPath.Contains('BuildingBlocks')) and $(MSBuildProjectName.EndsWith('Application'))">
      <ProjectReference Include="$(DomainProject)" Condition="Exists('$(DomainProject)')" />
    </ItemGroup>

    <!-- BuildingBlocks Infrastructure layer - depends on Application only (gets Domain through Application) -->
    <ItemGroup Condition="$(MSBuildProjectFullPath.Contains('BuildingBlocks')) and $(MSBuildProjectName.EndsWith('Infrastructure'))">
      <ProjectReference Include="$(ApplicationProject)" Condition="Exists('$(ApplicationProject)')" />
    </ItemGroup>

    <!-- BuildingBlocks API layer - depends on Infrastructure only (gets Domain and Application through Infrastructure) -->
    <ItemGroup Condition="$(MSBuildProjectFullPath.Contains('BuildingBlocks')) and $(MSBuildProjectName.EndsWith('API'))">
      <ProjectReference Include="$(InfrastructureProject)" Condition="Exists('$(InfrastructureProject)')" />
    </ItemGroup>

    <!-- Service Projects Dependencies -->
    <!-- Service API projects reference BuildingBlocks.API and their own Infrastructure -->
    <ItemGroup Condition="$(MSBuildProjectFullPath.Contains('Services')) and $(MSBuildProjectName.EndsWith('API'))">
      <ProjectReference Include="$(APIProject)" Condition="Exists('$(APIProject)')" />
      <ProjectReference Include="..\Infrastructure\*.csproj" />
    </ItemGroup>

    <!-- Service Application projects reference BuildingBlocks.Application and their own Domain -->
    <ItemGroup Condition="$(MSBuildProjectFullPath.Contains('Services')) and $(MSBuildProjectName.EndsWith('Application'))">
      <ProjectReference Include="$(ApplicationProject)" Condition="Exists('$(ApplicationProject)')" />
      <ProjectReference Include="..\Domain\*.csproj" />
    </ItemGroup>

    <!-- Service Domain projects reference BuildingBlocks.Domain -->
    <ItemGroup Condition="$(MSBuildProjectFullPath.Contains('Services')) and $(MSBuildProjectName.EndsWith('Domain'))">
      <ProjectReference Include="$(DomainProject)" Condition="Exists('$(DomainProject)')" />
    </ItemGroup>

    <!-- Service Infrastructure projects reference BuildingBlocks.Infrastructure and their own Application -->
    <ItemGroup Condition="$(MSBuildProjectFullPath.Contains('Services')) and $(MSBuildProjectName.EndsWith('Infrastructure'))">
      <ProjectReference Include="$(InfrastructureProject)" Condition="Exists('$(InfrastructureProject)')" />
      <ProjectReference Include="..\Application\*.csproj" />
    </ItemGroup>

  </Target>

  <!-- Framework References -->
  <ItemGroup Condition="'$(MSBuildProjectName)' == 'BuildingBlocks.Infrastructure' OR '$(MSBuildProjectName)' == 'BuildingBlocks.API'">
    <FrameworkReference Include="Microsoft.AspNetCore.App" />
  </ItemGroup>

  <!-- Enhanced project type detection -->
  <PropertyGroup>
    <IsApiProject Condition="$(MSBuildProjectName.Contains('API')) OR $(MSBuildProjectFile.Contains('\API\')) OR $(MSBuildProjectName.Contains('WebApi'))">true</IsApiProject>
    <IsInfrastructureProject Condition="$(MSBuildProjectName.Contains('Infrastructure')) OR $(MSBuildProjectFile.Contains('\Infrastructure\'))">true</IsInfrastructureProject>
    <IsDomainProject Condition="$(MSBuildProjectName.Contains('Domain')) OR $(MSBuildProjectFile.Contains('\Domain\'))">true</IsDomainProject>
    <IsApplicationProject Condition="$(MSBuildProjectName.Contains('Application')) OR $(MSBuildProjectFile.Contains('\Application\'))">true</IsApplicationProject>
  </PropertyGroup>

  <!-- Add Global Package References -->
  <Target Name="AddGlobalPackageReferences" BeforeTargets="CollectPackageReferences">
    
    <!-- Core Microsoft Extensions (all projects) -->
    <ItemGroup>
      <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" />
      <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" />
      <PackageReference Include="Microsoft.Extensions.Configuration.Abstractions" />
    </ItemGroup>

  </Target>

  <!-- BuildingBlocks-specific Package References -->
  <Target Name="AddBuildingBlocksPackageReferences" BeforeTargets="CollectPackageReferences">

    <!-- BuildingBlocks Domain layer specific packages -->
    <ItemGroup Condition="'$(MSBuildProjectName)' == 'BuildingBlocks.Domain'">
      <PackageReference Include="System.Text.Json" />
    </ItemGroup>

    <!-- BuildingBlocks Application layer specific packages -->
    <ItemGroup Condition="'$(MSBuildProjectName)' == 'BuildingBlocks.Application'">
      <PackageReference Include="Microsoft.Extensions.Caching.Abstractions" />
      <PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" />
    </ItemGroup>

    <!-- BuildingBlocks Infrastructure layer specific packages -->
    <ItemGroup Condition="'$(MSBuildProjectName)' == 'BuildingBlocks.Infrastructure'">
      <PackageReference Include="Microsoft.EntityFrameworkCore" />
      <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" />
      <PackageReference Include="Microsoft.Extensions.Caching.Memory" />
      <PackageReference Include="Microsoft.Extensions.Caching.StackExchangeRedis" />
      <PackageReference Include="FluentValidation" />
    </ItemGroup>

    <!-- BuildingBlocks API layer specific packages -->
    <ItemGroup Condition="'$(MSBuildProjectName)' == 'BuildingBlocks.API'">
      <PackageReference Include="FluentValidation" />
      <PackageReference Include="FluentValidation.DependencyInjectionExtensions" />
      <PackageReference Include="Microsoft.AspNetCore.OpenApi" />
      <PackageReference Include="Scalar.AspNetCore" />
      <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" />
      <PackageReference Include="Asp.Versioning.Http" />
      <PackageReference Include="Asp.Versioning.Mvc.ApiExplorer" />
    </ItemGroup>

  </Target>

  <!-- Add Domain Project Package References -->
  <Target Name="AddDomainPackageReferences" BeforeTargets="CollectPackageReferences" Condition="'$(IsDomainProject)' == 'true' AND '$(MSBuildProjectName)' != 'BuildingBlocks.Domain'">
    
    <!-- Domain projects typically only need System.Text.Json for serialization -->
    <ItemGroup Condition="'$(IncludeJsonSerialization)' != 'false'">
      <PackageReference Include="System.Text.Json" />
    </ItemGroup>
    
  </Target>

  <!-- Add Application Project Package References -->
  <Target Name="AddApplicationPackageReferences" BeforeTargets="CollectPackageReferences" Condition="'$(IsApplicationProject)' == 'true' AND '$(MSBuildProjectName)' != 'BuildingBlocks.Application'">
    
    <ItemGroup>
      <PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" />
      <PackageReference Include="Microsoft.Extensions.Caching.Abstractions" />
    </ItemGroup>

    <!-- FluentValidation for application layer -->
    <ItemGroup Condition="'$(IncludeValidation)' != 'false'">
      <PackageReference Include="FluentValidation" />
      <PackageReference Include="FluentValidation.DependencyInjectionExtensions" />
    </ItemGroup>

  </Target>

  <!-- Add Infrastructure Project Package References -->
  <Target Name="AddInfrastructurePackageReferences" BeforeTargets="CollectPackageReferences" Condition="'$(IsInfrastructureProject)' == 'true' AND '$(MSBuildProjectName)' != 'BuildingBlocks.Infrastructure'">
    
    <!-- Core infrastructure dependencies -->
    <ItemGroup>
      <PackageReference Include="Microsoft.Extensions.Options" />
      <PackageReference Include="Microsoft.Extensions.Options.ConfigurationExtensions" />
    </ItemGroup>

    <!-- Entity Framework Core -->
    <ItemGroup Condition="'$(IncludeEntityFramework)' != 'false'">
      <PackageReference Include="Microsoft.EntityFrameworkCore" />
      <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" />
      <PackageReference Include="Microsoft.EntityFrameworkCore.Design" PrivateAssets="All" />
      <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" PrivateAssets="All" />
    </ItemGroup>

    <!-- Caching -->
    <ItemGroup Condition="'$(IncludeCaching)' != 'false'">
      <PackageReference Include="Microsoft.Extensions.Caching.Memory" />
      <PackageReference Include="Microsoft.Extensions.Caching.StackExchangeRedis" />
    </ItemGroup>

  </Target>

  <!-- Add API Project Package References -->
  <Target Name="AddApiPackageReferences" BeforeTargets="CollectPackageReferences" Condition="'$(IsApiProject)' == 'true' AND '$(MSBuildProjectName)' != 'BuildingBlocks.API'">
    
    <!-- Core ASP.NET Core -->
    <ItemGroup>
      <PackageReference Include="Microsoft.AspNetCore.OpenApi" />
      <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" />
      <PackageReference Include="Microsoft.AspNetCore.Authorization" />
    </ItemGroup>

    <!-- OpenAPI/Swagger -->
    <ItemGroup Condition="'$(IncludeSwagger)' != 'false'">
      <PackageReference Include="Swashbuckle.AspNetCore" />
      <PackageReference Include="Scalar.AspNetCore" />
    </ItemGroup>

    <!-- Validation -->
    <ItemGroup Condition="'$(IncludeValidation)' != 'false'">
      <PackageReference Include="FluentValidation.AspNetCore" />
      <PackageReference Include="FluentValidation.DependencyInjectionExtensions" />
    </ItemGroup>

  </Target>

  <!-- Add Test-specific Package References -->
  <Target Name="AddTestPackageReferences" BeforeTargets="CollectPackageReferences" Condition="'$(IsTestProject)' == 'true'">
    
    <ItemGroup>
      <PackageReference Include="Microsoft.NET.Test.Sdk" PrivateAssets="All" />
      <PackageReference Include="xunit" PrivateAssets="All" />
      <PackageReference Include="xunit.runner.visualstudio" PrivateAssets="All" />
      <PackageReference Include="FluentAssertions" PrivateAssets="All" />
      <PackageReference Include="coverlet.collector" PrivateAssets="All" />
    </ItemGroup>

  </Target>

</Project> 