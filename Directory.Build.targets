<?xml version="1.0" encoding="utf-8"?>
<Project>

  <!-- Custom Build Targets -->

  <!-- Clean artifacts directory before build -->
  <Target Name="CleanArtifacts" BeforeTargets="BeforeBuild">
    <ItemGroup>
      <ArtifactsToDelete Include="$(MSBuildThisFileDirectory)artifacts\**\*" />
    </ItemGroup>
    <Delete Files="@(ArtifactsToDelete)" ContinueOnError="true" />
    <RemoveDir Directories="$(MSBuildThisFileDirectory)artifacts" ContinueOnError="true" />
  </Target>

  <!-- Create artifacts directory structure -->
  <Target Name="CreateArtifactsDirectories" BeforeTargets="BeforeBuild">
    <MakeDir Directories="$(OutputPath)" Condition="!Exists('$(OutputPath)')" />
    <MakeDir Directories="$(BaseIntermediateOutputPath)" Condition="!Exists('$(BaseIntermediateOutputPath)')" />
    <MakeDir Directories="$(PackageOutputPath)" Condition="!Exists('$(PackageOutputPath)')" />
  </Target>

  <!-- Copy documentation files to output -->
  <Target Name="CopyDocumentationFiles" AfterTargets="Build" Condition="'$(Configuration)' == 'Release'">
    <ItemGroup>
      <DocumentationFiles Include="$(MSBuildThisFileDirectory)README.md" />
      <DocumentationFiles Include="$(MSBuildThisFileDirectory)CHANGELOG.md" />
      <DocumentationFiles Include="$(MSBuildThisFileDirectory)LICENSE" />
    </ItemGroup>
    <Copy SourceFiles="@(DocumentationFiles)" DestinationFolder="$(OutputPath)" Condition="Exists('%(FullPath)')" />
  </Target>

  <!-- Generate version information file -->
  <Target Name="GenerateVersionInfo" BeforeTargets="BeforeBuild" DependsOnTargets="GetGitInfo">
    <PropertyGroup>
      <VersionInfoFile>$(BaseIntermediateOutputPath)VersionInfo.cs</VersionInfoFile>
      <VersionInfoContent>
// <auto-generated />
using System.Reflection;

[assembly: AssemblyMetadata("BuildDate", "$(BuildDate)")]
[assembly: AssemblyMetadata("BuildMachine", "$(COMPUTERNAME)")]
[assembly: AssemblyMetadata("BuildUser", "$(USERNAME)")]
[assembly: AssemblyMetadata("GitCommit", "$(GitCommitId)")]
[assembly: AssemblyMetadata("GitBranch", "$(GitBranch)")]
      </VersionInfoContent>
    </PropertyGroup>
    
    <MakeDir Directories="$(BaseIntermediateOutputPath)" />
    <WriteLinesToFile File="$(VersionInfoFile)" Lines="$(VersionInfoContent)" Overwrite="true" />
    
    <ItemGroup>
      <Compile Include="$(VersionInfoFile)" />
    </ItemGroup>
  </Target>

  <!-- Set build date -->
  <PropertyGroup>
    <BuildDate>$([System.DateTime]::UtcNow.ToString('yyyy-MM-ddTHH:mm:ss.fffZ'))</BuildDate>
  </PropertyGroup>

  <!-- Git information -->
  <Target Name="GetGitInfo">
    <PropertyGroup>
      <GitCommitId>unknown</GitCommitId>
      <GitBranch>unknown</GitBranch>
    </PropertyGroup>
    
    <Exec Command="git rev-parse HEAD" 
          ConsoleToMSBuild="true" 
          ContinueOnError="true"
          Condition="Exists('$(MSBuildThisFileDirectory).git')">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommitId" />
    </Exec>
    
    <Exec Command="git rev-parse --abbrev-ref HEAD" 
          ConsoleToMSBuild="true" 
          ContinueOnError="true"
          Condition="Exists('$(MSBuildThisFileDirectory).git')">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitBranch" />
    </Exec>
  </Target>

  <!-- Validate project references -->
  <Target Name="ValidateProjectReferences" BeforeTargets="BeforeBuild">
    <ItemGroup>
      <InvalidReferences Include="@(ProjectReference)" 
                         Condition="!Exists('%(ProjectReference.Identity)')" />
    </ItemGroup>
    
    <Error Text="Invalid project reference: %(InvalidReferences.Identity)" 
           Condition="'@(InvalidReferences)' != ''" />
  </Target>

  <!-- Code quality targets -->
  <Target Name="RunCodeAnalysis" Condition="'$(RunAnalyzersDuringBuild)' == 'true'">
    <Message Text="Running code analysis for $(MSBuildProjectName)" Importance="high" />
  </Target>

  <!-- Test coverage target -->
  <Target Name="GenerateTestCoverage" AfterTargets="Test" Condition="'$(IsTestProject)' == 'true'">
    <Message Text="Generating test coverage report for $(MSBuildProjectName)" Importance="high" />
    
    <PropertyGroup>
      <CoverageReportPath>$(MSBuildThisFileDirectory)artifacts\coverage\$(MSBuildProjectName)\</CoverageReportPath>
    </PropertyGroup>
    
    <MakeDir Directories="$(CoverageReportPath)" />
  </Target>

  <!-- Package validation -->
  <Target Name="ValidatePackage" AfterTargets="Pack" Condition="'$(IsPackable)' == 'true'">
    <Message Text="Validating package for $(MSBuildProjectName)" Importance="high" />
    
    <ItemGroup>
      <GeneratedPackages Include="$(PackageOutputPath)$(PackageId).*.nupkg" />
    </ItemGroup>
    
    <Message Text="Generated package: %(GeneratedPackages.Identity)" Importance="high" />
  </Target>

  <!-- Documentation generation -->
  <Target Name="GenerateDocumentation" AfterTargets="Build" Condition="'$(GenerateDocumentationFile)' == 'true' AND '$(Configuration)' == 'Release'">
    <PropertyGroup>
      <DocumentationOutputPath>$(MSBuildThisFileDirectory)artifacts\docs\$(MSBuildProjectName)\</DocumentationOutputPath>
    </PropertyGroup>
    
    <MakeDir Directories="$(DocumentationOutputPath)" />
    
    <Copy SourceFiles="$(OutputPath)$(AssemblyName).xml" 
          DestinationFolder="$(DocumentationOutputPath)" 
          Condition="Exists('$(OutputPath)$(AssemblyName).xml')" />
  </Target>

  <!-- Security scan target -->
  <Target Name="SecurityScan" Condition="'$(RunSecurityScan)' == 'true'">
    <Message Text="Running security scan for $(MSBuildProjectName)" Importance="high" />
    <!-- Add security scanning tools integration here -->
  </Target>

  <!-- Performance profiling target -->
  <Target Name="PerformanceProfiling" Condition="'$(RunPerformanceProfiling)' == 'true'">
    <Message Text="Running performance profiling for $(MSBuildProjectName)" Importance="high" />
    <!-- Add performance profiling tools integration here -->
  </Target>

  <!-- Database migration target -->
  <Target Name="UpdateDatabase" Condition="'$(IsInfrastructureProject)' == 'true'">
    <Message Text="Checking for database migrations in $(MSBuildProjectName)" Importance="high" />
    <!-- Add EF Core migration commands here -->
  </Target>

  <!-- API documentation generation -->
  <Target Name="GenerateApiDocumentation" AfterTargets="Build" Condition="'$(IsApiProject)' == 'true' AND '$(Configuration)' == 'Release'">
    <PropertyGroup>
      <ApiDocOutputPath>$(MSBuildThisFileDirectory)artifacts\api-docs\</ApiDocOutputPath>
    </PropertyGroup>
    
    <MakeDir Directories="$(ApiDocOutputPath)" />
    <Message Text="Generating API documentation for $(MSBuildProjectName)" Importance="high" />
  </Target>

  <!-- Container image build target -->
  <Target Name="BuildContainerImage" Condition="'$(BuildContainerImage)' == 'true'">
    <Message Text="Building container image for $(MSBuildProjectName)" Importance="high" />
    
    <PropertyGroup>
      <ContainerImageName>$(MSBuildProjectName.ToLowerInvariant())</ContainerImageName>
      <ContainerImageTag>$(Version)</ContainerImageTag>
      <DockerfilePath>$(MSBuildProjectDirectory)\Dockerfile</DockerfilePath>
    </PropertyGroup>
    
    <Error Text="Docker is required to build container images. Please install Docker." 
           Condition="!Exists('$(DockerfilePath)')" />
    
    <Exec Command="docker build -t $(ContainerImageName):$(ContainerImageTag) -f $(DockerfilePath) ." 
          WorkingDirectory="$(MSBuildProjectDirectory)" 
          ContinueOnError="false"
          Condition="Exists('$(DockerfilePath)')" />
  </Target>

  <!-- Helm chart packaging -->
  <Target Name="PackageHelmChart" Condition="'$(PackageHelmChart)' == 'true'">
    <Message Text="Packaging Helm chart for $(MSBuildProjectName)" Importance="high" />
    
    <PropertyGroup>
      <HelmChartPath>$(MSBuildThisFileDirectory)charts\$(MSBuildProjectName.ToLowerInvariant())\</HelmChartPath>
      <HelmPackageOutput>$(MSBuildThisFileDirectory)artifacts\helm\</HelmPackageOutput>
      <HelmChartFile>$(HelmChartPath)Chart.yaml</HelmChartFile>
    </PropertyGroup>
    
    <MakeDir Directories="$(HelmPackageOutput)" />
    
    <Error Text="Helm chart not found at $(HelmChartFile)" 
           Condition="!Exists('$(HelmChartFile)')" />
    
    <Exec Command="helm package $(HelmChartPath) --destination $(HelmPackageOutput)" 
          Condition="Exists('$(HelmChartFile)')" 
          ContinueOnError="false" />
  </Target>

  <!-- Integration test target -->
  <Target Name="RunIntegrationTests" Condition="'$(IsIntegrationTestProject)' == 'true'">
    <Message Text="Running integration tests for $(MSBuildProjectName)" Importance="high" />
    
    <PropertyGroup>
      <TestResultsPath>$(MSBuildThisFileDirectory)artifacts\test-results\</TestResultsPath>
    </PropertyGroup>
    
    <MakeDir Directories="$(TestResultsPath)" />
    
    <Exec Command="dotnet test --configuration $(Configuration) --logger trx --results-directory $(TestResultsPath)" 
          WorkingDirectory="$(MSBuildProjectDirectory)" />
  </Target>

  <!-- Benchmark target -->
  <Target Name="RunBenchmarks" Condition="'$(IsBenchmarkProject)' == 'true'">
    <Message Text="Running benchmarks for $(MSBuildProjectName)" Importance="high" />
    
    <PropertyGroup>
      <BenchmarkOutputPath>$(MSBuildThisFileDirectory)artifacts\benchmarks\</BenchmarkOutputPath>
    </PropertyGroup>
    
    <MakeDir Directories="$(BenchmarkOutputPath)" />
    
    <Exec Command="dotnet run --configuration Release -- --artifacts $(BenchmarkOutputPath)" 
          WorkingDirectory="$(MSBuildProjectDirectory)" />
  </Target>

  <!-- Clean up temporary files -->
  <Target Name="CleanupTempFiles" AfterTargets="Build">
    <ItemGroup>
      <TempFiles Include="$(MSBuildProjectDirectory)\**\*.tmp" />
      <TempFiles Include="$(MSBuildProjectDirectory)\**\*.cache" />
      <TempFiles Include="$(BaseIntermediateOutputPath)**\*.tmp" />
    </ItemGroup>
    
    <Delete Files="@(TempFiles)" ContinueOnError="true" />
  </Target>

  <!-- Define project type properties based on project names and paths -->
  <PropertyGroup>
    <IsApiProject Condition="$(MSBuildProjectName.Contains('API')) OR $(MSBuildProjectFile.Contains('\API\'))">true</IsApiProject>
    <IsInfrastructureProject Condition="$(MSBuildProjectName.Contains('Infrastructure')) OR $(MSBuildProjectFile.Contains('\Infrastructure\'))">true</IsInfrastructureProject>
    <IsIntegrationTestProject Condition="$(MSBuildProjectName.Contains('IntegrationTests')) OR $(MSBuildProjectName.Contains('Integration.Tests'))">true</IsIntegrationTestProject>
    <IsBenchmarkProject Condition="$(MSBuildProjectName.Contains('Benchmarks')) OR $(MSBuildProjectName.Contains('Benchmark'))">true</IsBenchmarkProject>
  </PropertyGroup>

  <!-- Add Global Package References -->
  <Target Name="AddGlobalPackageReferences" BeforeTargets="CollectPackageReferences">
    
    <!-- Source Link for all projects except tests and benchmarks -->
    <ItemGroup Condition="'$(IsSourceLinkSupported)' != 'false' AND '$(IsTestProject)' != 'true' AND '$(IsBenchmarkProject)' != 'true'">
      <PackageReference Include="Microsoft.SourceLink.GitHub" PrivateAssets="All" />
    </ItemGroup>

    <!-- MinVer for versioning (all packable projects) -->
    <ItemGroup Condition="'$(UseMinVer)' != 'false' AND '$(IsPackable)' == 'true'">
      <PackageReference Include="MinVer" PrivateAssets="All" />
    </ItemGroup>

    <!-- Core Microsoft Extensions (all projects) -->
    <ItemGroup>
      <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" />
      <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" />
      <PackageReference Include="Microsoft.Extensions.Configuration.Abstractions" />
      <PackageReference Include="System.ComponentModel.Annotations" />
    </ItemGroup>

  </Target>

  <!-- Add Domain Project Package References -->
  <Target Name="AddDomainPackageReferences" BeforeTargets="CollectPackageReferences" Condition="'$(IsDomainProject)' == 'true'">
    <!-- Domain projects typically only need minimal dependencies -->
  </Target>

  <!-- Add Application Project Package References -->
  <Target Name="AddApplicationPackageReferences" BeforeTargets="CollectPackageReferences" Condition="'$(IsApplicationProject)' == 'true'">
    
    <ItemGroup>
      <PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" />
      <PackageReference Include="Microsoft.Extensions.Caching.Abstractions" />
    </ItemGroup>

    <!-- FluentValidation for application layer -->
    <ItemGroup Condition="'$(IncludeValidation)' != 'false'">
      <PackageReference Include="FluentValidation" />
      <PackageReference Include="FluentValidation.DependencyInjectionExtensions" />
    </ItemGroup>

  </Target>

  <!-- Add Infrastructure Project Package References -->
  <Target Name="AddInfrastructurePackageReferences" BeforeTargets="CollectPackageReferences" Condition="'$(IsInfrastructureProject)' == 'true'">
    
    <!-- Core infrastructure dependencies -->
    <ItemGroup>
      <PackageReference Include="Microsoft.Extensions.Options" />
      <PackageReference Include="Microsoft.Extensions.Options.ConfigurationExtensions" />
      <PackageReference Include="Microsoft.Extensions.Http" />
    </ItemGroup>

    <!-- Entity Framework Core -->
    <ItemGroup Condition="'$(IncludeEntityFramework)' != 'false'">
      <PackageReference Include="Microsoft.EntityFrameworkCore" />
      <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" />
      <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" />
      <PackageReference Include="Microsoft.EntityFrameworkCore.Design" PrivateAssets="All" />
      <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" PrivateAssets="All" />
    </ItemGroup>

    <!-- Caching -->
    <ItemGroup Condition="'$(IncludeCaching)' != 'false'">
      <PackageReference Include="Microsoft.Extensions.Caching.Memory" />
      <PackageReference Include="Microsoft.Extensions.Caching.StackExchangeRedis" />
      <PackageReference Include="StackExchange.Redis" />
    </ItemGroup>

    <!-- Authentication & Authorization -->
    <ItemGroup Condition="'$(IncludeAuthentication)' != 'false'">
      <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" />
      <PackageReference Include="Microsoft.AspNetCore.Authorization" />
      <PackageReference Include="System.IdentityModel.Tokens.Jwt" />
      <PackageReference Include="BCrypt.Net-Next" />
    </ItemGroup>

    <!-- Mapping -->
    <ItemGroup Condition="'$(IncludeMapping)' != 'false'">
      <PackageReference Include="AutoMapper" />
      <PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" />
      <PackageReference Include="Mapster" />
      <PackageReference Include="Mapster.DependencyInjection" />
    </ItemGroup>

    <!-- Validation -->
    <ItemGroup Condition="'$(IncludeValidation)' != 'false'">
      <PackageReference Include="FluentValidation" />
      <PackageReference Include="FluentValidation.DependencyInjectionExtensions" />
    </ItemGroup>

    <!-- Serialization -->
    <ItemGroup Condition="'$(IncludeSerialization)' != 'false'">
      <PackageReference Include="System.Text.Json" />
      <PackageReference Include="Newtonsoft.Json" />
      <PackageReference Include="Google.Protobuf" />
      <PackageReference Include="MessagePack" />
      <PackageReference Include="CsvHelper" />
    </ItemGroup>

    <!-- Background Services -->
    <ItemGroup Condition="'$(IncludeBackgroundServices)' != 'false'">
      <PackageReference Include="Hangfire" />
      <PackageReference Include="Hangfire.SqlServer" />
      <PackageReference Include="Hangfire.MemoryStorage" />
    </ItemGroup>

    <!-- Messaging -->
    <ItemGroup Condition="'$(IncludeMessaging)' != 'false'">
      <PackageReference Include="Azure.Messaging.ServiceBus" />
      <PackageReference Include="RabbitMQ.Client" />
    </ItemGroup>

    <!-- Monitoring & Observability -->
    <ItemGroup Condition="'$(IncludeMonitoring)' != 'false'">
      <PackageReference Include="Microsoft.Extensions.Diagnostics.HealthChecks" />
      <PackageReference Include="Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore" />
      <PackageReference Include="OpenTelemetry" />
      <PackageReference Include="OpenTelemetry.Extensions.Hosting" />
      <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" />
      <PackageReference Include="OpenTelemetry.Instrumentation.EntityFrameworkCore" />
    </ItemGroup>

    <!-- Security -->
    <ItemGroup Condition="'$(IncludeSecurity)' != 'false'">
      <PackageReference Include="System.Security.Cryptography.Algorithms" />
    </ItemGroup>

    <!-- Storage -->
    <ItemGroup Condition="'$(IncludeCloudStorage)' != 'false'">
      <PackageReference Include="Azure.Storage.Blobs" />
      <PackageReference Include="AWSSDK.S3" />
    </ItemGroup>

    <!-- Communication -->
    <ItemGroup Condition="'$(IncludeEmailServices)' != 'false'">
      <PackageReference Include="MailKit" />
      <PackageReference Include="MimeKit" />
    </ItemGroup>

    <!-- HTTP -->
    <ItemGroup Condition="'$(IncludeHttpClient)' != 'false'">
      <PackageReference Include="Polly" />
      <PackageReference Include="Polly.Extensions.Http" />
    </ItemGroup>

    <!-- Utilities -->
    <ItemGroup>
      <PackageReference Include="Microsoft.Extensions.FileProviders.Abstractions" />
    </ItemGroup>

  </Target>

  <!-- Add API Project Package References -->
  <Target Name="AddApiPackageReferences" BeforeTargets="CollectPackageReferences" Condition="'$(IsApiProject)' == 'true'">
    
    <!-- Core ASP.NET Core -->
    <ItemGroup>
      <PackageReference Include="Microsoft.AspNetCore.OpenApi" />
      <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" />
      <PackageReference Include="Microsoft.AspNetCore.Authorization" />
      <PackageReference Include="Microsoft.AspNetCore.Cors" />
      <PackageReference Include="Microsoft.Extensions.Options.ConfigurationExtensions" />
    </ItemGroup>

    <!-- API Versioning -->
    <ItemGroup Condition="'$(IncludeApiVersioning)' != 'false'">
      <PackageReference Include="Microsoft.AspNetCore.Mvc.Versioning" />
      <PackageReference Include="Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer" />
    </ItemGroup>

    <!-- OpenAPI/Swagger -->
    <ItemGroup Condition="'$(IncludeSwagger)' != 'false'">
      <PackageReference Include="Swashbuckle.AspNetCore" />
      <PackageReference Include="Swashbuckle.AspNetCore.Annotations" />
      <PackageReference Include="Swashbuckle.AspNetCore.Filters" />
      <PackageReference Include="Scalar.AspNetCore" />
    </ItemGroup>

    <!-- Validation -->
    <ItemGroup Condition="'$(IncludeValidation)' != 'false'">
      <PackageReference Include="FluentValidation.AspNetCore" />
      <PackageReference Include="FluentValidation.DependencyInjectionExtensions" />
    </ItemGroup>

    <!-- Rate Limiting -->
    <ItemGroup Condition="'$(IncludeRateLimiting)' != 'false'">
      <PackageReference Include="Microsoft.AspNetCore.RateLimiting" />
      <PackageReference Include="AspNetCoreRateLimit" />
    </ItemGroup>

    <!-- Health Checks -->
    <ItemGroup Condition="'$(IncludeHealthChecks)' != 'false'">
      <PackageReference Include="Microsoft.Extensions.Diagnostics.HealthChecks" />
      <PackageReference Include="Microsoft.AspNetCore.Diagnostics.HealthChecks" />
      <PackageReference Include="AspNetCore.HealthChecks.UI" />
      <PackageReference Include="AspNetCore.HealthChecks.UI.InMemory.Storage" />
    </ItemGroup>

    <!-- Monitoring & Observability -->
    <ItemGroup Condition="'$(IncludeMonitoring)' != 'false'">
      <PackageReference Include="OpenTelemetry.AspNetCore" />
      <PackageReference Include="OpenTelemetry.Extensions.Hosting" />
      <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" />
    </ItemGroup>

    <!-- Security -->
    <ItemGroup Condition="'$(IncludeSecurity)' != 'false'">
      <PackageReference Include="Microsoft.AspNetCore.DataProtection" />
      <PackageReference Include="Microsoft.AspNetCore.HttpsPolicy" />
    </ItemGroup>

    <!-- Serialization -->
    <ItemGroup Condition="'$(IncludeSerialization)' != 'false'">
      <PackageReference Include="System.Text.Json" />
      <PackageReference Include="Newtonsoft.Json" />
      <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" />
    </ItemGroup>

    <!-- HTTP Client -->
    <ItemGroup Condition="'$(IncludeHttpClient)' != 'false'">
      <PackageReference Include="Microsoft.Extensions.Http" />
      <PackageReference Include="Polly.Extensions.Http" />
    </ItemGroup>

  </Target>

  <!-- Add Test-specific Package References -->
  <Target Name="AddTestPackageReferences" BeforeTargets="CollectPackageReferences" Condition="'$(IsTestProject)' == 'true'">
    
    <ItemGroup>
      <PackageReference Include="coverlet.collector" PrivateAssets="All" />
      <PackageReference Include="coverlet.msbuild" PrivateAssets="All" />
    </ItemGroup>

    <!-- Add common test packages -->
    <ItemGroup Condition="'$(IncludeTestFramework)' != 'false'">
      <PackageReference Include="Microsoft.NET.Test.Sdk" PrivateAssets="All" />
      <PackageReference Include="xunit" PrivateAssets="All" />
      <PackageReference Include="xunit.runner.visualstudio" PrivateAssets="All" />
    </ItemGroup>

  </Target>

  <!-- Add Benchmark-specific Package References -->
  <Target Name="AddBenchmarkPackageReferences" BeforeTargets="CollectPackageReferences" Condition="'$(IsBenchmarkProject)' == 'true'">
    
    <ItemGroup>
      <PackageReference Include="BenchmarkDotNet" />
    </ItemGroup>

  </Target>

</Project> 