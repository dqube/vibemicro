name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  NUGET_XMLDOC_MODE: skip

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 📦 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: 🔍 Verify build configuration
      run: |
        echo "Building branch: ${{ github.ref_name }}"
        echo "Event: ${{ github.event_name }}"
        dotnet --version
        dotnet --info
    
    - name: 📦 Restore dependencies
      run: dotnet restore --verbosity minimal
    
    - name: 🔨 Build solution
      run: dotnet build --configuration Release --no-restore --verbosity minimal
    
    - name: 🧪 Run tests
      run: |
        dotnet test \
          --configuration Release \
          --no-build \
          --verbosity minimal \
          --logger "trx" \
          --results-directory ./artifacts/test-results \
          --collect:"XPlat Code Coverage" \
          --settings coverlet.runsettings
    
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./artifacts/test-results/
        retention-days: 30
    
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        directory: ./artifacts/coverage/
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: 🔍 Code analysis
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic
        echo "Code analysis completed"
    
    - name: 📦 Create packages
      if: github.event_name == 'push' && (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/'))
      run: |
        dotnet pack \
          --configuration Release \
          --no-build \
          --output ./artifacts/packages \
          --verbosity minimal
    
    - name: 📤 Upload packages
      if: github.event_name == 'push' && (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/'))
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: ./artifacts/packages/
        retention-days: 90

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 🔒 Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.log
        if grep -q "has the following vulnerable packages" security-scan.log; then
          echo "❌ Vulnerable packages found"
          exit 1
        else
          echo "✅ No vulnerable packages found"
        fi
    
    - name: 📤 Upload security scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: security-scan.log
        retention-days: 30

  publish:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 📦 Download packages
      uses: actions/download-artifact@v4
      with:
        name: packages
        path: ./artifacts/packages/
    
    - name: 🚀 Publish to NuGet
      run: |
        for package in ./artifacts/packages/*.nupkg; do
          echo "Publishing $package"
          dotnet nuget push "$package" \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
        done
    
    - name: 🏷️ Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## What's Changed
          
          This release includes the following packages:
          
          - BuildingBlocks.Domain
          - BuildingBlocks.Application  
          - BuildingBlocks.Infrastructure
          - BuildingBlocks.API
          
          ### Installation
          
          ```bash
          dotnet add package BuildingBlocks.Domain --version ${{ github.ref_name }}
          dotnet add package BuildingBlocks.Application --version ${{ github.ref_name }}
          dotnet add package BuildingBlocks.Infrastructure --version ${{ github.ref_name }}
          dotnet add package BuildingBlocks.API --version ${{ github.ref_name }}
          ```
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v1.0.0...${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Login to Docker Hub
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: buildingblocks/api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 