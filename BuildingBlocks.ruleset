<?xml version="1.0" encoding="utf-8"?>
<RuleSet Name="BuildingBlocks Code Analysis Rules" Description="Comprehensive code analysis rules for BuildingBlocks microservices projects following DDD, CQRS, and Clean Architecture patterns" ToolsVersion="17.0">
  
  <!-- Microsoft .NET Analyzer Rules -->
  <Rules AnalyzerId="Microsoft.Analyzers.ManagedCodeAnalysis" RuleNamespace="Microsoft.Rules.Managed">
    <!-- Design Rules -->
    <Rule Id="CA1000" Action="Warning" /> <!-- Do not declare static members on generic types -->
    <Rule Id="CA1001" Action="Warning" /> <!-- Types that own disposable fields should be disposable -->
    <Rule Id="CA1002" Action="Warning" /> <!-- Do not expose generic lists -->
    <Rule Id="CA1003" Action="Warning" /> <!-- Use generic event handler instances -->
    <Rule Id="CA1005" Action="Warning" /> <!-- Avoid excessive parameters on generic types -->
    <Rule Id="CA1008" Action="Warning" /> <!-- Enums should have zero value -->
    <Rule Id="CA1010" Action="Warning" /> <!-- Collections should implement generic interface -->
    <Rule Id="CA1012" Action="Warning" /> <!-- Abstract types should not have constructors -->
    <Rule Id="CA1014" Action="Warning" /> <!-- Mark assemblies with CLSCompliant -->
    <Rule Id="CA1016" Action="Warning" /> <!-- Mark assemblies with assembly version -->
    <Rule Id="CA1017" Action="Warning" /> <!-- Mark assemblies with ComVisible -->
    <Rule Id="CA1018" Action="Warning" /> <!-- Mark attributes with AttributeUsageAttribute -->
    <Rule Id="CA1019" Action="Warning" /> <!-- Define accessors for attribute arguments -->
    <Rule Id="CA1021" Action="Warning" /> <!-- Avoid out parameters -->
    <Rule Id="CA1024" Action="Warning" /> <!-- Use properties where appropriate -->
    <Rule Id="CA1027" Action="Warning" /> <!-- Mark enums with FlagsAttribute -->
    <Rule Id="CA1028" Action="Warning" /> <!-- Enum Storage should be Int32 -->
    <Rule Id="CA1030" Action="Warning" /> <!-- Use events where appropriate -->
    <Rule Id="CA1031" Action="Warning" /> <!-- Do not catch general exception types -->
    <Rule Id="CA1032" Action="Warning" /> <!-- Implement standard exception constructors -->
    <Rule Id="CA1033" Action="Warning" /> <!-- Interface methods should be callable by child types -->
    <Rule Id="CA1034" Action="Warning" /> <!-- Nested types should not be visible -->
    <Rule Id="CA1036" Action="Warning" /> <!-- Override methods on comparable types -->
    <Rule Id="CA1040" Action="Warning" /> <!-- Avoid empty interfaces -->
    <Rule Id="CA1041" Action="Warning" /> <!-- Provide ObsoleteAttribute message -->
    <Rule Id="CA1043" Action="Warning" /> <!-- Use Integral Or String Argument For Indexers -->
    <Rule Id="CA1044" Action="Warning" /> <!-- Properties should not be write only -->
    <Rule Id="CA1045" Action="Warning" /> <!-- Do not pass types by reference -->
    <Rule Id="CA1046" Action="Warning" /> <!-- Do not overload equality operator on reference types -->
    <Rule Id="CA1047" Action="Warning" /> <!-- Do not declare protected member in sealed type -->
    <Rule Id="CA1050" Action="Warning" /> <!-- Declare types in namespaces -->
    <Rule Id="CA1051" Action="Warning" /> <!-- Do not declare visible instance fields -->
    <Rule Id="CA1052" Action="Warning" /> <!-- Static holder types should be Static or NotInheritable -->
    <Rule Id="CA1054" Action="Warning" /> <!-- Uri parameters should not be strings -->
    <Rule Id="CA1055" Action="Warning" /> <!-- Uri return values should not be strings -->
    <Rule Id="CA1056" Action="Warning" /> <!-- Uri properties should not be strings -->
    <Rule Id="CA1058" Action="Warning" /> <!-- Types should not extend certain base types -->
    <Rule Id="CA1060" Action="Warning" /> <!-- Move pinvokes to native methods class -->
    <Rule Id="CA1061" Action="Warning" /> <!-- Do not hide base class methods -->
    <Rule Id="CA1063" Action="Warning" /> <!-- Implement IDisposable Correctly -->
    <Rule Id="CA1064" Action="Warning" /> <!-- Exceptions should be public -->
    <Rule Id="CA1065" Action="Warning" /> <!-- Do not raise exceptions in unexpected locations -->

    <!-- Globalization Rules -->
    <Rule Id="CA1300" Action="Warning" /> <!-- Specify MessageBoxOptions -->
    <Rule Id="CA1301" Action="Warning" /> <!-- Avoid duplicate accelerators -->
    <Rule Id="CA1302" Action="Warning" /> <!-- Do not hardcode locale specific strings -->
    <Rule Id="CA1303" Action="Warning" /> <!-- Do not pass literals as localized parameters -->
    <Rule Id="CA1304" Action="Warning" /> <!-- Specify CultureInfo -->
    <Rule Id="CA1305" Action="Warning" /> <!-- Specify IFormatProvider -->
    <Rule Id="CA1306" Action="Warning" /> <!-- Set locale for data types -->
    <Rule Id="CA1307" Action="Warning" /> <!-- Specify StringComparison -->
    <Rule Id="CA1308" Action="Warning" /> <!-- Normalize strings to uppercase -->
    <Rule Id="CA1309" Action="Warning" /> <!-- Use ordinal stringcomparison -->

    <!-- Mobility Rules -->
    <Rule Id="CA1400" Action="Warning" /> <!-- P/Invoke entry points should exist -->
    <Rule Id="CA1401" Action="Warning" /> <!-- P/Invokes should not be visible -->
    <Rule Id="CA1402" Action="Warning" /> <!-- Avoid overloads in COM visible interfaces -->
    <Rule Id="CA1403" Action="Warning" /> <!-- Auto layout types should not be COM visible -->
    <Rule Id="CA1404" Action="Warning" /> <!-- Call GetLastError immediately after P/Invoke -->
    <Rule Id="CA1405" Action="Warning" /> <!-- COM visible type base types should be COM visible -->
    <Rule Id="CA1410" Action="Warning" /> <!-- COM registration methods should be matched -->
    <Rule Id="CA1415" Action="Warning" /> <!-- Declare P/Invokes correctly -->

    <!-- Performance Rules -->
    <Rule Id="CA1800" Action="Warning" /> <!-- Do not cast unnecessarily -->
    <Rule Id="CA1801" Action="Warning" /> <!-- Review unused parameters -->
    <Rule Id="CA1802" Action="Warning" /> <!-- Use literals where appropriate -->
    <Rule Id="CA1804" Action="Warning" /> <!-- Remove unused locals -->
    <Rule Id="CA1806" Action="Warning" /> <!-- Do not ignore method results -->
    <Rule Id="CA1809" Action="Warning" /> <!-- Avoid excessive locals -->
    <Rule Id="CA1810" Action="Warning" /> <!-- Initialize reference type static fields inline -->
    <Rule Id="CA1811" Action="Warning" /> <!-- Avoid uncalled private code -->
    <Rule Id="CA1812" Action="Warning" /> <!-- Avoid uninstantiated internal classes -->
    <Rule Id="CA1813" Action="Warning" /> <!-- Avoid unsealed attributes -->
    <Rule Id="CA1814" Action="Warning" /> <!-- Prefer jagged arrays over multidimensional -->
    <Rule Id="CA1815" Action="Warning" /> <!-- Override equals and operator equals on value types -->
    <Rule Id="CA1816" Action="Warning" /> <!-- Dispose methods should call SuppressFinalize -->
    <Rule Id="CA1819" Action="Warning" /> <!-- Properties should not return arrays -->
    <Rule Id="CA1820" Action="Warning" /> <!-- Test for empty strings using string length -->
    <Rule Id="CA1821" Action="Warning" /> <!-- Remove empty Finalizers -->
    <Rule Id="CA1822" Action="Warning" /> <!-- Mark members as static -->
    <Rule Id="CA1823" Action="Warning" /> <!-- Avoid unused private fields -->
    <Rule Id="CA1824" Action="Warning" /> <!-- Mark assemblies with NeutralResourcesLanguageAttribute -->

    <!-- Reliability Rules -->
    <Rule Id="CA2000" Action="Warning" /> <!-- Dispose objects before losing scope -->
    <Rule Id="CA2001" Action="Warning" /> <!-- Avoid calling problematic methods -->
    <Rule Id="CA2002" Action="Warning" /> <!-- Do not lock on objects with weak identity -->
    <Rule Id="CA2003" Action="Warning" /> <!-- Do not treat fibers as threads -->
    <Rule Id="CA2004" Action="Warning" /> <!-- Remove calls to GC.KeepAlive -->
    <Rule Id="CA2006" Action="Warning" /> <!-- Use SafeHandle to encapsulate native resources -->

    <!-- Security Rules -->
    <Rule Id="CA2100" Action="Warning" /> <!-- Review SQL queries for security vulnerabilities -->
    <Rule Id="CA2101" Action="Warning" /> <!-- Specify marshaling for P/Invoke string arguments -->
    <Rule Id="CA2102" Action="Warning" /> <!-- Catch non-CLSCompliant exceptions in general handlers -->
    <Rule Id="CA2103" Action="Warning" /> <!-- Review imperative security -->
    <Rule Id="CA2104" Action="Warning" /> <!-- Do not declare read only mutable reference types -->
    <Rule Id="CA2105" Action="Warning" /> <!-- Array fields should not be read only -->
    <Rule Id="CA2106" Action="Warning" /> <!-- Secure asserts -->
    <Rule Id="CA2107" Action="Warning" /> <!-- Review deny and permit only usage -->
    <Rule Id="CA2108" Action="Warning" /> <!-- Review declarative security on value types -->
    <Rule Id="CA2109" Action="Warning" /> <!-- Review visible event handlers -->
    <Rule Id="CA2111" Action="Warning" /> <!-- Pointers should not be visible -->
    <Rule Id="CA2112" Action="Warning" /> <!-- Secured types should not expose fields -->
    <Rule Id="CA2114" Action="Warning" /> <!-- Method security should be a superset of type -->
    <Rule Id="CA2115" Action="Warning" /> <!-- Call GC.KeepAlive when using native resources -->
    <Rule Id="CA2116" Action="Warning" /> <!-- APTCA methods should only call APTCA methods -->
    <Rule Id="CA2117" Action="Warning" /> <!-- APTCA types should only extend APTCA base types -->
    <Rule Id="CA2118" Action="Warning" /> <!-- Review SuppressUnmanagedCodeSecurityAttribute usage -->
    <Rule Id="CA2119" Action="Warning" /> <!-- Seal methods that satisfy private interfaces -->
    <Rule Id="CA2120" Action="Warning" /> <!-- Secure serialization constructors -->
    <Rule Id="CA2121" Action="Warning" /> <!-- Static constructors should be private -->
    <Rule Id="CA2122" Action="Warning" /> <!-- Do not indirectly expose methods with link demands -->
    <Rule Id="CA2123" Action="Warning" /> <!-- Override link demands should be identical to base -->
    <Rule Id="CA2124" Action="Warning" /> <!-- Wrap vulnerable finally clauses in outer try -->
    <Rule Id="CA2126" Action="Warning" /> <!-- Type link demands require inheritance demands -->
    <Rule Id="CA2130" Action="Warning" /> <!-- Security critical constants should be transparent -->
    <Rule Id="CA2131" Action="Warning" /> <!-- Security critical types may not participate in type equivalence -->
    <Rule Id="CA2132" Action="Warning" /> <!-- Default constructors must be at least as critical as base type default constructors -->
    <Rule Id="CA2133" Action="Warning" /> <!-- Delegates must bind to methods with consistent transparency -->
    <Rule Id="CA2134" Action="Warning" /> <!-- Methods must keep consistent transparency when overriding base methods -->
    <Rule Id="CA2135" Action="Warning" /> <!-- Level 2 assemblies should not contain LinkDemands -->
    <Rule Id="CA2136" Action="Warning" /> <!-- Members should not have conflicting transparency annotations -->
    <Rule Id="CA2137" Action="Warning" /> <!-- Transparent methods must contain only verifiable IL -->
    <Rule Id="CA2138" Action="Warning" /> <!-- Transparent methods should not call methods with the SuppressUnmanagedCodeSecurity attribute -->
    <Rule Id="CA2139" Action="Warning" /> <!-- Transparent methods may not use the HandleProcessCorruptingExceptions attribute -->
    <Rule Id="CA2140" Action="Warning" /> <!-- Transparent code should not reference security critical items -->
    <Rule Id="CA2141" Action="Warning" /> <!-- Transparent methods must not satisfy LinkDemands -->
    <Rule Id="CA2142" Action="Warning" /> <!-- Transparent code should not be protected with LinkDemands -->
    <Rule Id="CA2143" Action="Warning" /> <!-- Transparent methods should not use security demands -->
    <Rule Id="CA2144" Action="Warning" /> <!-- Transparent code should not load assemblies from byte arrays -->
    <Rule Id="CA2145" Action="Warning" /> <!-- Transparent methods should not be decorated with the SuppressUnmanagedCodeSecurityAttribute -->
    <Rule Id="CA2146" Action="Warning" /> <!-- Types must be at least as critical as their base types and interfaces -->
    <Rule Id="CA2147" Action="Warning" /> <!-- Transparent methods may not use security asserts -->
    <Rule Id="CA2149" Action="Warning" /> <!-- Transparent methods must not call into native code -->
    <Rule Id="CA2151" Action="Warning" /> <!-- Fields with critical types should be security critical -->

    <!-- Usage Rules -->
    <Rule Id="CA2200" Action="Warning" /> <!-- Rethrow to preserve stack details -->
    <Rule Id="CA2201" Action="Warning" /> <!-- Do not raise reserved exception types -->
    <Rule Id="CA2202" Action="Warning" /> <!-- Do not dispose objects multiple times -->
    <Rule Id="CA2204" Action="Warning" /> <!-- Literals should be spelled correctly -->
    <Rule Id="CA2205" Action="Warning" /> <!-- Use managed equivalents of win32 api -->
    <Rule Id="CA2207" Action="Warning" /> <!-- Initialize value type static fields inline -->
    <Rule Id="CA2208" Action="Warning" /> <!-- Instantiate argument exceptions correctly -->
    <Rule Id="CA2210" Action="Warning" /> <!-- Assemblies should have valid strong names -->
    <Rule Id="CA2211" Action="Warning" /> <!-- Non-constant fields should not be visible -->
    <Rule Id="CA2212" Action="Warning" /> <!-- Do not mark serviced components with WebMethod -->
    <Rule Id="CA2213" Action="Warning" /> <!-- Disposable fields should be disposed -->
    <Rule Id="CA2214" Action="Warning" /> <!-- Do not call overridable methods in constructors -->
    <Rule Id="CA2215" Action="Warning" /> <!-- Dispose methods should call base class dispose -->
    <Rule Id="CA2216" Action="Warning" /> <!-- Disposable types should declare finalizer -->
    <Rule Id="CA2217" Action="Warning" /> <!-- Do not mark enums with FlagsAttribute -->
    <Rule Id="CA2218" Action="Warning" /> <!-- Override GetHashCode on overriding Equals -->
    <Rule Id="CA2219" Action="Warning" /> <!-- Do not raise exceptions in exception clauses -->
    <Rule Id="CA2220" Action="Warning" /> <!-- Finalizers should call base class finalizer -->
    <Rule Id="CA2221" Action="Warning" /> <!-- Finalizers should be protected -->
    <Rule Id="CA2222" Action="Warning" /> <!-- Do not decrease inherited member visibility -->
    <Rule Id="CA2223" Action="Warning" /> <!-- Members should differ by more than return type -->
    <Rule Id="CA2224" Action="Warning" /> <!-- Override Equals on overloading operator equals -->
    <Rule Id="CA2225" Action="Warning" /> <!-- Operator overloads have named alternates -->
    <Rule Id="CA2226" Action="Warning" /> <!-- Operators should have symmetrical overloads -->
    <Rule Id="CA2227" Action="Warning" /> <!-- Collection properties should be read only -->
    <Rule Id="CA2228" Action="Warning" /> <!-- Do not ship unreleased resource formats -->
    <Rule Id="CA2229" Action="Warning" /> <!-- Implement serialization constructors -->
    <Rule Id="CA2230" Action="Warning" /> <!-- Use params for variable arguments -->
    <Rule Id="CA2231" Action="Warning" /> <!-- Overload operator equals on overriding value type Equals -->
    <Rule Id="CA2232" Action="Warning" /> <!-- Mark Windows Forms entry points with STAThread -->
    <Rule Id="CA2233" Action="Warning" /> <!-- Operations should not overflow -->
    <Rule Id="CA2234" Action="Warning" /> <!-- Pass system uri objects instead of strings -->
    <Rule Id="CA2235" Action="Warning" /> <!-- Mark all non-serializable fields -->
    <Rule Id="CA2236" Action="Warning" /> <!-- Call base class methods on ISerializable types -->
    <Rule Id="CA2237" Action="Warning" /> <!-- Mark ISerializable types with serializable -->
    <Rule Id="CA2238" Action="Warning" /> <!-- Implement serialization methods correctly -->
    <Rule Id="CA2239" Action="Warning" /> <!-- Provide deserialization methods for optional fields -->
    <Rule Id="CA2240" Action="Warning" /> <!-- Implement ISerializable correctly -->
    <Rule Id="CA2241" Action="Warning" /> <!-- Provide correct arguments to formatting methods -->
    <Rule Id="CA2242" Action="Warning" /> <!-- Test for NaN correctly -->
    <Rule Id="CA2243" Action="Warning" /> <!-- Attribute string literals should parse correctly -->

    <!-- Nullable Reference Types -->
    <Rule Id="CA1062" Action="Warning" /> <!-- Validate arguments of public methods -->
    <Rule Id="CA1303" Action="None" />    <!-- Do not pass literals as localized parameters -->
    <Rule Id="CA1508" Action="Warning" /> <!-- Avoid dead conditional code -->
    <Rule Id="CA1510" Action="Warning" /> <!-- Use ArgumentNullException throw helper -->
    <Rule Id="CA1511" Action="Warning" /> <!-- Use ArgumentException throw helper -->
    <Rule Id="CA1512" Action="Warning" /> <!-- Use ArgumentOutOfRangeException throw helper -->
    <Rule Id="CA1513" Action="Warning" /> <!-- Use ObjectDisposedException throw helper -->

    <!-- Modern C# Features -->
    <Rule Id="CA1825" Action="Warning" /> <!-- Avoid zero-length array allocations -->
    <Rule Id="CA1826" Action="Warning" /> <!-- Do not use Enumerable methods on indexable collections -->
    <Rule Id="CA1827" Action="Warning" /> <!-- Do not use Count() or LongCount() when Any() can be used -->
    <Rule Id="CA1828" Action="Warning" /> <!-- Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used -->
    <Rule Id="CA1829" Action="Warning" /> <!-- Use Length/Count property instead of Count() when available -->
    <Rule Id="CA1830" Action="Warning" /> <!-- Prefer strongly-typed Append and Insert method overloads on StringBuilder -->
    <Rule Id="CA1831" Action="Warning" /> <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate -->
    <Rule Id="CA1832" Action="Warning" /> <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate -->
    <Rule Id="CA1833" Action="Warning" /> <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate -->
    <Rule Id="CA1834" Action="Warning" /> <!-- Consider using 'StringBuilder.Append(char)' when applicable -->
    <Rule Id="CA1835" Action="Warning" /> <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' -->
    <Rule Id="CA1836" Action="Warning" /> <!-- Prefer IsEmpty over Count -->
    <Rule Id="CA1837" Action="Warning" /> <!-- Use 'Environment.ProcessId' -->
    <Rule Id="CA1838" Action="Warning" /> <!-- Avoid 'StringBuilder' parameters for P/Invokes -->
    <Rule Id="CA1839" Action="Warning" /> <!-- Use 'Environment.ProcessPath' -->
    <Rule Id="CA1840" Action="Warning" /> <!-- Use 'Environment.CurrentManagedThreadId' -->
    <Rule Id="CA1841" Action="Warning" /> <!-- Prefer Dictionary.Contains methods -->
    <Rule Id="CA1842" Action="Warning" /> <!-- Do not use 'WhenAll' with a single task -->
    <Rule Id="CA1843" Action="Warning" /> <!-- Do not use 'WaitAll' with a single task -->
    <Rule Id="CA1844" Action="Warning" /> <!-- Provide memory-based overrides of async methods when subclassing 'Stream' -->
    <Rule Id="CA1845" Action="Warning" /> <!-- Use span-based 'string.Concat' -->
    <Rule Id="CA1846" Action="Warning" /> <!-- Prefer 'AsSpan' over 'Substring' -->
    <Rule Id="CA1847" Action="Warning" /> <!-- Use char literal for a single character lookup -->
    <Rule Id="CA1848" Action="Warning" /> <!-- Use the LoggerMessage delegates -->
    <Rule Id="CA1849" Action="Warning" /> <!-- Call async methods when in an async method -->
    <Rule Id="CA1850" Action="Warning" /> <!-- Prefer static 'HashData' method over 'ComputeHash' -->

    <!-- Security & Reliability (Modern) -->
    <Rule Id="CA2007" Action="Warning" /> <!-- Consider calling ConfigureAwait on the awaited task -->
    <Rule Id="CA2008" Action="Warning" /> <!-- Do not create tasks without passing a TaskScheduler -->
    <Rule Id="CA2009" Action="Warning" /> <!-- Do not call ToImmutableCollection on an ImmutableCollection value -->
    <Rule Id="CA2011" Action="Warning" /> <!-- Avoid infinite recursion -->
    <Rule Id="CA2012" Action="Warning" /> <!-- Use ValueTasks correctly -->
    <Rule Id="CA2013" Action="Warning" /> <!-- Do not use ReferenceEquals with value types -->
    <Rule Id="CA2014" Action="Warning" /> <!-- Do not use stackalloc in loops -->
    <Rule Id="CA2015" Action="Warning" /> <!-- Do not define finalizers for types derived from MemoryManager<T> -->
    <Rule Id="CA2016" Action="Warning" /> <!-- Forward the 'CancellationToken' parameter to methods that take one -->
    <Rule Id="CA2017" Action="Warning" /> <!-- Parameter count mismatch -->
    <Rule Id="CA2018" Action="Warning" /> <!-- 'Buffer.BlockCopy' expects the number of bytes to be copied for the 'count' argument -->
    <Rule Id="CA2019" Action="Warning" /> <!-- Improper 'ThreadStatic' field initialization -->
    <Rule Id="CA2020" Action="Warning" /> <!-- Prevent behavioral change -->
  </Rules>

  <!-- StyleCop Analyzers -->
  <Rules AnalyzerId="StyleCop.Analyzers" RuleNamespace="StyleCop.Analyzers">
    <!-- Documentation Rules -->
    <Rule Id="SA1600" Action="None" />    <!-- Elements should be documented -->
    <Rule Id="SA1601" Action="None" />    <!-- Partial elements should be documented -->
    <Rule Id="SA1602" Action="None" />    <!-- Enumeration items should be documented -->
    <Rule Id="SA1633" Action="None" />    <!-- File should have header -->
    <Rule Id="SA1652" Action="None" />    <!-- Enable XML documentation output -->
    
    <!-- Ordering Rules -->
    <Rule Id="SA1200" Action="Warning" /> <!-- Using directives should be placed correctly -->
    <Rule Id="SA1201" Action="Warning" /> <!-- Elements should appear in the correct order -->
    <Rule Id="SA1202" Action="Warning" /> <!-- Elements should be ordered by access -->
    <Rule Id="SA1203" Action="Warning" /> <!-- Constants should appear before fields -->
    <Rule Id="SA1204" Action="Warning" /> <!-- Static elements should appear before instance elements -->
    <Rule Id="SA1205" Action="Warning" /> <!-- Partial elements should declare access -->
    <Rule Id="SA1206" Action="Warning" /> <!-- Declaration keywords should follow order -->
    <Rule Id="SA1207" Action="Warning" /> <!-- Protected should come before internal -->
    <Rule Id="SA1208" Action="Warning" /> <!-- System using directives should be placed before other using directives -->
    <Rule Id="SA1209" Action="Warning" /> <!-- Using alias directives should be placed after other using directives -->
    <Rule Id="SA1210" Action="Warning" /> <!-- Using directives should be ordered alphabetically by namespace -->
    <Rule Id="SA1211" Action="Warning" /> <!-- Using alias directives should be ordered alphabetically by alias name -->
    <Rule Id="SA1212" Action="Warning" /> <!-- Property accessors should follow order -->
    <Rule Id="SA1213" Action="Warning" /> <!-- Event accessors should follow order -->
    <Rule Id="SA1214" Action="Warning" /> <!-- Readonly fields should appear before non-readonly fields -->
    <Rule Id="SA1216" Action="Warning" /> <!-- Using static directives should be placed at the correct location -->
    <Rule Id="SA1217" Action="Warning" /> <!-- Using static directives should be ordered alphabetically -->
    
    <!-- Naming Rules -->
    <Rule Id="SA1300" Action="Warning" /> <!-- Element should begin with upper-case letter -->
    <Rule Id="SA1301" Action="Warning" /> <!-- Element should begin with lower-case letter -->
    <Rule Id="SA1302" Action="Warning" /> <!-- Interface names should begin with I -->
    <Rule Id="SA1303" Action="Warning" /> <!-- Const field names should begin with upper-case letter -->
    <Rule Id="SA1304" Action="Warning" /> <!-- Non-private readonly fields should begin with upper-case letter -->
    <Rule Id="SA1305" Action="Warning" /> <!-- Field names should not use Hungarian notation -->
    <Rule Id="SA1306" Action="Warning" /> <!-- Field names should begin with lower-case letter -->
    <Rule Id="SA1307" Action="Warning" /> <!-- Accessible fields should begin with upper-case letter -->
    <Rule Id="SA1308" Action="Warning" /> <!-- Variable names should not be prefixed -->
    <Rule Id="SA1309" Action="None" />    <!-- Field names should not begin with underscore -->
    <Rule Id="SA1310" Action="Warning" /> <!-- Field names should not contain underscore -->
    <Rule Id="SA1311" Action="Warning" /> <!-- Static readonly fields should begin with upper-case letter -->
    <Rule Id="SA1312" Action="Warning" /> <!-- Variable names should begin with lower-case letter -->
    <Rule Id="SA1313" Action="Warning" /> <!-- Parameter names should begin with lower-case letter -->
    <Rule Id="SA1314" Action="Warning" /> <!-- Type parameter names should begin with T -->
    
    <!-- Maintainability Rules -->
    <Rule Id="SA1400" Action="Warning" /> <!-- Access modifier should be declared -->
    <Rule Id="SA1401" Action="Warning" /> <!-- Fields should be private -->
    <Rule Id="SA1402" Action="Warning" /> <!-- File may only contain a single type -->
    <Rule Id="SA1403" Action="Warning" /> <!-- File may only contain a single namespace -->
    <Rule Id="SA1404" Action="Warning" /> <!-- Code analysis suppression should have justification -->
    <Rule Id="SA1405" Action="Warning" /> <!-- Debug.Assert should provide message text -->
    <Rule Id="SA1406" Action="Warning" /> <!-- Debug.Fail should provide message text -->
    <Rule Id="SA1407" Action="Warning" /> <!-- Arithmetic expressions should declare precedence -->
    <Rule Id="SA1408" Action="Warning" /> <!-- Conditional expressions should declare precedence -->
    <Rule Id="SA1410" Action="Warning" /> <!-- Remove delegate parens when possible -->
    <Rule Id="SA1411" Action="Warning" /> <!-- Attribute constructor should not use unnecessary parenthesis -->
    <Rule Id="SA1412" Action="Warning" /> <!-- Store files as UTF-8 with byte order mark -->
    <Rule Id="SA1413" Action="Warning" /> <!-- Use trailing comma in multi-line initializers -->
    
    <!-- Layout Rules -->
    <Rule Id="SA1500" Action="Warning" /> <!-- Braces for multi-line statements should not share line -->
    <Rule Id="SA1501" Action="Warning" /> <!-- Statement should not be on a single line -->
    <Rule Id="SA1502" Action="Warning" /> <!-- Element should not be on a single line -->
    <Rule Id="SA1503" Action="Warning" /> <!-- Braces should not be omitted -->
    <Rule Id="SA1504" Action="Warning" /> <!-- All accessors should be single-line or multi-line -->
    <Rule Id="SA1505" Action="Warning" /> <!-- Opening braces should not be followed by blank line -->
    <Rule Id="SA1506" Action="Warning" /> <!-- Element documentation headers should not be followed by blank line -->
    <Rule Id="SA1507" Action="Warning" /> <!-- Code should not contain multiple blank lines in a row -->
    <Rule Id="SA1508" Action="Warning" /> <!-- Closing braces should not be preceded by blank line -->
    <Rule Id="SA1509" Action="Warning" /> <!-- Opening braces should not be preceded by blank line -->
    <Rule Id="SA1510" Action="Warning" /> <!-- Chained statement blocks should not be preceded by blank line -->
    <Rule Id="SA1511" Action="Warning" /> <!-- While-do footer should not be preceded by blank line -->
    <Rule Id="SA1512" Action="Warning" /> <!-- Single-line comments should not be followed by blank line -->
    <Rule Id="SA1513" Action="Warning" /> <!-- Closing brace should be followed by blank line -->
    <Rule Id="SA1514" Action="Warning" /> <!-- Element documentation header should be preceded by blank line -->
    <Rule Id="SA1515" Action="Warning" /> <!-- Single-line comment should be preceded by blank line -->
    <Rule Id="SA1516" Action="Warning" /> <!-- Elements should be separated by blank line -->
    <Rule Id="SA1517" Action="Warning" /> <!-- Code should not contain blank lines at start of file -->
    <Rule Id="SA1518" Action="Warning" /> <!-- Use line endings correctly at end of file -->
    <Rule Id="SA1519" Action="Warning" /> <!-- Braces should not be omitted from multi-line child statement -->
    <Rule Id="SA1520" Action="Warning" /> <!-- Use braces consistently -->
    
    <!-- Spacing Rules -->
    <Rule Id="SA1000" Action="Warning" /> <!-- Keywords should be spaced correctly -->
    <Rule Id="SA1001" Action="Warning" /> <!-- Commas should be spaced correctly -->
    <Rule Id="SA1002" Action="Warning" /> <!-- Semicolons should be spaced correctly -->
    <Rule Id="SA1003" Action="Warning" /> <!-- Symbols should be spaced correctly -->
    <Rule Id="SA1004" Action="Warning" /> <!-- Documentation lines should begin with single space -->
    <Rule Id="SA1005" Action="Warning" /> <!-- Single line comments should begin with single space -->
    <Rule Id="SA1006" Action="Warning" /> <!-- Preprocessor keywords should not be preceded by space -->
    <Rule Id="SA1007" Action="Warning" /> <!-- Operator keyword should be followed by space -->
    <Rule Id="SA1008" Action="Warning" /> <!-- Opening parenthesis should be spaced correctly -->
    <Rule Id="SA1009" Action="Warning" /> <!-- Closing parenthesis should be spaced correctly -->
    <Rule Id="SA1010" Action="Warning" /> <!-- Opening square brackets should be spaced correctly -->
    <Rule Id="SA1011" Action="Warning" /> <!-- Closing square brackets should be spaced correctly -->
    <Rule Id="SA1012" Action="Warning" /> <!-- Opening braces should be spaced correctly -->
    <Rule Id="SA1013" Action="Warning" /> <!-- Closing braces should be spaced correctly -->
    <Rule Id="SA1014" Action="Warning" /> <!-- Opening generic brackets should be spaced correctly -->
    <Rule Id="SA1015" Action="Warning" /> <!-- Closing generic brackets should be spaced correctly -->
    <Rule Id="SA1016" Action="Warning" /> <!-- Opening attribute brackets should be spaced correctly -->
    <Rule Id="SA1017" Action="Warning" /> <!-- Closing attribute brackets should be spaced correctly -->
    <Rule Id="SA1018" Action="Warning" /> <!-- Nullable type symbols should be spaced correctly -->
    <Rule Id="SA1019" Action="Warning" /> <!-- Member access symbols should be spaced correctly -->
    <Rule Id="SA1020" Action="Warning" /> <!-- Increment decrement symbols should be spaced correctly -->
    <Rule Id="SA1021" Action="Warning" /> <!-- Negative signs should be spaced correctly -->
    <Rule Id="SA1022" Action="Warning" /> <!-- Positive signs should be spaced correctly -->
    <Rule Id="SA1023" Action="Warning" /> <!-- Dereference and access of symbols should be spaced correctly -->
    <Rule Id="SA1024" Action="Warning" /> <!-- Colons should be spaced correctly -->
    <Rule Id="SA1025" Action="Warning" /> <!-- Code should not contain multiple whitespace in a row -->
    <Rule Id="SA1026" Action="Warning" /> <!-- Code should not contain space after new keyword in implicitly typed array allocation -->
    <Rule Id="SA1027" Action="Warning" /> <!-- Use tabs correctly -->
    <Rule Id="SA1028" Action="Warning" /> <!-- Code should not contain trailing whitespace -->

    <!-- Readability Rules -->
    <Rule Id="SA1100" Action="Warning" /> <!-- Do not prefix calls with base unless local implementation exists -->
    <Rule Id="SA1101" Action="None" />    <!-- Prefix local calls with this -->
    <Rule Id="SA1102" Action="Warning" /> <!-- Query clause should follow previous clause -->
    <Rule Id="SA1103" Action="Warning" /> <!-- Query clauses should be on separate lines or all on one line -->
    <Rule Id="SA1104" Action="Warning" /> <!-- Query clause should begin on new line when previous clause spans multiple lines -->
    <Rule Id="SA1105" Action="Warning" /> <!-- Query clauses spanning multiple lines should begin on own line -->
    <Rule Id="SA1106" Action="Warning" /> <!-- Code should not contain empty statements -->
    <Rule Id="SA1107" Action="Warning" /> <!-- Code should not contain multiple statements on one line -->
    <Rule Id="SA1108" Action="Warning" /> <!-- Block statements should not contain embedded comments -->
    <Rule Id="SA1110" Action="Warning" /> <!-- Opening parenthesis or bracket should be on declaration line -->
    <Rule Id="SA1111" Action="Warning" /> <!-- Closing parenthesis should be on line of last parameter -->
    <Rule Id="SA1112" Action="Warning" /> <!-- Closing parenthesis should be on line of opening parenthesis -->
    <Rule Id="SA1113" Action="Warning" /> <!-- Comma should be on the same line as previous parameter -->
    <Rule Id="SA1114" Action="Warning" /> <!-- Parameter list should follow declaration -->
    <Rule Id="SA1115" Action="Warning" /> <!-- Parameter should follow comma -->
    <Rule Id="SA1116" Action="Warning" /> <!-- Split parameters should start on line after declaration -->
    <Rule Id="SA1117" Action="Warning" /> <!-- Parameters should be on same line or separate lines -->
    <Rule Id="SA1118" Action="Warning" /> <!-- Parameter should not span multiple lines -->
    <Rule Id="SA1120" Action="Warning" /> <!-- Comments should contain text -->
    <Rule Id="SA1121" Action="Warning" /> <!-- Use built-in type alias -->
    <Rule Id="SA1122" Action="Warning" /> <!-- Use string.Empty for empty strings -->
    <Rule Id="SA1123" Action="Warning" /> <!-- Do not place regions within elements -->
    <Rule Id="SA1124" Action="Warning" /> <!-- Do not use regions -->
    <Rule Id="SA1125" Action="Warning" /> <!-- Use shorthand for nullable types -->
    <Rule Id="SA1127" Action="Warning" /> <!-- Generic type constraints should be on their own line -->
    <Rule Id="SA1128" Action="Warning" /> <!-- Put constructor initializers on their own line -->
    <Rule Id="SA1129" Action="Warning" /> <!-- Do not use default value type constructor -->
    <Rule Id="SA1130" Action="Warning" /> <!-- Use lambda syntax -->
    <Rule Id="SA1131" Action="Warning" /> <!-- Use readable conditions -->
    <Rule Id="SA1132" Action="Warning" /> <!-- Do not combine fields -->
    <Rule Id="SA1133" Action="Warning" /> <!-- Do not combine attributes -->
    <Rule Id="SA1134" Action="Warning" /> <!-- Attributes should not share line -->
    <Rule Id="SA1135" Action="Warning" /> <!-- Enum values should be on separate lines -->
    <Rule Id="SA1136" Action="Warning" /> <!-- Enum values should be on separate lines -->
    <Rule Id="SA1137" Action="Warning" /> <!-- Elements should have the same indentation -->
    <Rule Id="SA1139" Action="Warning" /> <!-- Use literal suffix notation instead of casting -->
  </Rules>

  <!-- SonarAnalyzer Rules (Enhanced for Architecture) -->
  <Rules AnalyzerId="SonarAnalyzer.CSharp" RuleNamespace="SonarAnalyzer.CSharp">
    <!-- Architecture & Design Rules -->
    <Rule Id="S1066" Action="Warning" /> <!-- Collapsible "if" statements should be merged -->
    <Rule Id="S1104" Action="Warning" /> <!-- Fields should not have public accessibility -->
    <Rule Id="S1118" Action="Warning" /> <!-- Utility classes should not have public constructors -->
    <Rule Id="S1200" Action="Warning" /> <!-- Classes should not be coupled to too many other classes -->
    <Rule Id="S1541" Action="Warning" /> <!-- Methods and properties should not be too complex -->
    <Rule Id="S2326" Action="Warning" /> <!-- Unused type parameters should be removed -->
    <Rule Id="S2436" Action="Warning" /> <!-- Types and methods should not have too many generic parameters -->
    <Rule Id="S4023" Action="Warning" /> <!-- Interfaces should not be empty -->
    <Rule Id="S4136" Action="Warning" /> <!-- Method overloads should be grouped together -->

    <!-- Domain-Driven Design Rules -->
    <Rule Id="S1168" Action="Warning" /> <!-- Empty arrays and collections should be returned instead of null -->
    <Rule Id="S2292" Action="Warning" /> <!-- Trivial properties should be auto-implemented -->
    <Rule Id="S2933" Action="Warning" /> <!-- Fields that are only assigned in the constructor should be "readonly" -->
    <Rule Id="S3898" Action="Warning" /> <!-- Value types should implement "IEquatable<T>" -->
    <Rule Id="S3900" Action="Warning" /> <!-- Arguments of public methods should be validated against null -->
    <Rule Id="S4025" Action="Warning" /> <!-- Child class fields should not shadow parent class fields -->
    <Rule Id="S4035" Action="Warning" /> <!-- Classes implementing "IEquatable<T>" should be sealed -->

    <!-- CQRS & Event Sourcing Rules -->
    <Rule Id="S1186" Action="Warning" /> <!-- Methods should not be empty -->
    <Rule Id="S2139" Action="Warning" /> <!-- Exceptions should be either logged or rethrown but not both -->
    <Rule Id="S3168" Action="Warning" /> <!-- "async" methods should not return "void" -->
    <Rule Id="S3216" Action="Warning" /> <!-- "ConfigureAwait(false)" should be used -->
    <Rule Id="S3237" Action="Warning" /> <!-- "value" parameters should be used -->
    <Rule Id="S4462" Action="Warning" /> <!-- Calls to "async" methods should not be blocking -->

    <!-- Repository & Data Access Rules -->
    <Rule Id="S2930" Action="Warning" /> <!-- "IDisposables" should be disposed -->
    <Rule Id="S2931" Action="Warning" /> <!-- Classes with "IDisposable" members should implement "IDisposable" -->
    <Rule Id="S2952" Action="Warning" /> <!-- Classes should "Dispose" of members from the classes' own "Dispose" methods -->
    <Rule Id="S2953" Action="Warning" /> <!-- Methods named "Dispose" should implement "IDisposable.Dispose" -->
    <Rule Id="S3881" Action="Warning" /> <!-- "IDisposable" should be implemented correctly -->

    <!-- Security Rules -->
    <Rule Id="S2100" Action="Warning" /> <!-- Review SQL queries for security vulnerabilities -->
    <Rule Id="S2755" Action="Warning" /> <!-- XML parsers should not be vulnerable to XXE attacks -->
    <Rule Id="S3330" Action="Warning" /> <!-- Cookies should be "secure" -->
    <Rule Id="S4792" Action="Warning" /> <!-- Configuring loggers is security-sensitive -->
    <Rule Id="S4830" Action="Warning" /> <!-- Server certificates should be verified during SSL/TLS connections -->
    <Rule Id="S5042" Action="Warning" /> <!-- Expanding archive files is security-sensitive -->
    <Rule Id="S5122" Action="Warning" /> <!-- Having a permissive Cross-Origin Resource Sharing policy is security-sensitive -->
    <Rule Id="S5547" Action="Warning" /> <!-- Cipher algorithms should be robust -->
    <Rule Id="S5659" Action="Warning" /> <!-- JWT should be signed and verified -->
    <Rule Id="S5766" Action="Warning" /> <!-- Deserializing objects is security-sensitive -->
    <Rule Id="S5773" Action="Warning" /> <!-- Types allowed to be deserialized should be restricted -->
    <Rule Id="S6781" Action="Warning" /> <!-- JWT secret keys should not be disclosed -->

    <!-- Performance & Reliability Rules -->
    <Rule Id="S1067" Action="Warning" /> <!-- Expressions should not be too complex -->
    <Rule Id="S1125" Action="Warning" /> <!-- Boolean literals should not be redundant -->
    <Rule Id="S1172" Action="Warning" /> <!-- Unused method parameters should be removed -->
    <Rule Id="S1481" Action="Warning" /> <!-- Unused local variables should be removed -->
    <Rule Id="S1854" Action="Warning" /> <!-- Unused assignments should be removed -->
    <Rule Id="S2971" Action="Warning" /> <!-- "IEnumerable" LINQs should be simplified -->
    <Rule Id="S3052" Action="Warning" /> <!-- Members should not be initialized to default values -->
    <Rule Id="S3256" Action="Warning" /> <!-- "string.IsNullOrEmpty" should be used -->
    <Rule Id="S3353" Action="Warning" /> <!-- Unchanged local variables should be "const" -->
    <Rule Id="S3962" Action="Warning" /> <!-- "static readonly" constants should be "const" instead -->
    <Rule Id="S3963" Action="Warning" /> <!-- "static" fields should be initialized inline -->

    <!-- Code Quality Rules -->
    <Rule Id="S1134" Action="Info" />    <!-- Track uses of "FIXME" tags -->
    <Rule Id="S1135" Action="Info" />    <!-- Track uses of "TODO" tags -->
    <Rule Id="S1309" Action="Info" />    <!-- Track uses of in-source issue suppressions -->
    <Rule Id="S2114" Action="Warning" /> <!-- Collections should not be passed as arguments to their own methods -->
    <Rule Id="S2178" Action="Warning" /> <!-- Short-circuit logic should be used in boolean contexts -->
    <Rule Id="S2225" Action="Warning" /> <!-- "ToString()" method should not return null -->
    <Rule Id="S2328" Action="Warning" /> <!-- "GetHashCode" should not reference mutable fields -->
    <Rule Id="S2583" Action="Warning" /> <!-- Conditionally executed blocks should be reachable -->
    <Rule Id="S2589" Action="Warning" /> <!-- Boolean expressions should not be gratuitous -->
    <Rule Id="S2681" Action="Warning" /> <!-- Multiline blocks should be enclosed in curly braces -->
    <Rule Id="S2692" Action="Warning" /> <!-- "IndexOf" checks should not be for positive numbers -->
    <Rule Id="S2995" Action="Warning" /> <!-- "Object.ReferenceEquals" should not be used for value types -->
    <Rule Id="S3060" Action="Warning" /> <!-- "is" should not be used with "this" -->
    <Rule Id="S3172" Action="Warning" /> <!-- Delegates should not be subtracted -->
    <Rule Id="S3240" Action="Warning" /> <!-- The simplest possible condition syntax should be used -->
    <Rule Id="S3247" Action="Warning" /> <!-- Duplicate casts should not be made -->
    <Rule Id="S3358" Action="Warning" /> <!-- Ternary operators should not be nested -->
    <Rule Id="S3441" Action="Warning" /> <!-- Redundant casts should not be used -->
    <Rule Id="S3626" Action="Warning" /> <!-- Jump statements should not be redundant -->
    <Rule Id="S3655" Action="Warning" /> <!-- Empty nullable value should not be accessed -->

    <!-- Testability Rules -->
    <Rule Id="S2699" Action="Warning" /> <!-- Tests should include assertions -->
    <Rule Id="S2701" Action="Warning" /> <!-- Literal boolean values should not be used in assertions -->
    <Rule Id="S3415" Action="Warning" /> <!-- Assertion arguments should be passed in the correct order -->
    <Rule Id="S3431" Action="Warning" /> <!-- "ExpectedExceptionAttribute" should not be used -->
    <Rule Id="S3433" Action="Warning" /> <!-- Test methods should have correct signatures -->
    <Rule Id="S6354" Action="Warning" /> <!-- Use a testable date/time provider -->
    <Rule Id="S6580" Action="Warning" /> <!-- Use a testable date/time provider -->

    <!-- Modern C# Features -->
    <Rule Id="S3169" Action="Warning" /> <!-- Multiple variables should not be declared on the same line -->
    <Rule Id="S3235" Action="Warning" /> <!-- Methods should not have identical implementations -->
    <Rule Id="S3242" Action="Warning" /> <!-- Method parameters should be declared with base types -->
    <Rule Id="S3253" Action="Warning" /> <!-- Constructor and destructor declarations should not be redundant -->
    <Rule Id="S3254" Action="Warning" /> <!-- Default parameter values should not be passed as arguments -->
    <Rule Id="S3257" Action="Warning" /> <!-- Declarations and initializations should be as concise as possible -->
    <Rule Id="S3604" Action="Warning" /> <!-- Member initializer values should not be redundant -->
    <Rule Id="S3610" Action="Warning" /> <!-- Nullable type comparison should not be redundant -->
    <Rule Id="S4581" Action="Warning" /> <!-- "new Guid()" should not be used -->
    <Rule Id="S5034" Action="Warning" /> <!-- "ValueTask" should not be misused -->
  </Rules>

  <!-- .NET Compiler Platform (Roslyn) Analyzers -->
  <Rules AnalyzerId="Microsoft.CodeAnalysis.NetAnalyzers" RuleNamespace="Microsoft.CodeAnalysis.NetAnalyzers">
    <!-- Modern .NET Rules -->
    <Rule Id="CA1416" Action="Warning" /> <!-- Validate platform compatibility -->
    <Rule Id="CA1417" Action="Warning" /> <!-- Do not use 'OutAttribute' on string parameters for P/Invokes -->
    <Rule Id="CA1418" Action="Warning" /> <!-- Use valid platform string -->
    <Rule Id="CA1419" Action="Warning" /> <!-- Provide a parameterless constructor that is as visible as the containing type for concrete types derived from 'System.Runtime.InteropServices.SafeHandle' -->
    <Rule Id="CA1420" Action="Warning" /> <!-- Property, type, or attribute requires runtime marshalling -->
    <Rule Id="CA1421" Action="Warning" /> <!-- This method uses runtime marshalling even when the 'DisableRuntimeMarshallingAttribute' is applied -->
    <Rule Id="CA1422" Action="Warning" /> <!-- Validate platform compatibility -->

    <!-- ASP.NET Core Specific Rules -->
    <Rule Id="CA1852" Action="Warning" /> <!-- Seal internal types -->
    <Rule Id="CA1853" Action="Warning" /> <!-- Unnecessary call to 'Dictionary.ContainsKey(key)' -->
    <Rule Id="CA1854" Action="Warning" /> <!-- Prefer the 'IDictionary.TryGetValue(TKey, out TValue)' method -->
    <Rule Id="CA1855" Action="Warning" /> <!-- Prefer 'Clear' over 'Fill' -->
    <Rule Id="CA1856" Action="Warning" /> <!-- Incorrect usage of ConstantExpected attribute -->
    <Rule Id="CA1857" Action="Warning" /> <!-- A constant is expected for the parameter -->
    <Rule Id="CA1858" Action="Warning" /> <!-- Use 'StartsWith' instead of 'IndexOf' -->

    <!-- Entity Framework Core Rules -->
    <Rule Id="CA2249" Action="Warning" /> <!-- Consider using 'string.Contains' instead of 'string.IndexOf' -->
    <Rule Id="CA2250" Action="Warning" /> <!-- Use 'ThrowIfCancellationRequested' -->
    <Rule Id="CA2251" Action="Warning" /> <!-- Use 'string.Equals' over 'string.Compare' -->
    <Rule Id="CA2252" Action="Warning" /> <!-- This API requires opting into preview features -->
    <Rule Id="CA2253" Action="Warning" /> <!-- Named placeholders should not be numeric values -->
    <Rule Id="CA2254" Action="Warning" /> <!-- Template should be a static expression -->
    <Rule Id="CA2255" Action="Warning" /> <!-- The 'ModuleInitializer' attribute should not be used in libraries -->
    <Rule Id="CA2256" Action="Warning" /> <!-- All members declared in parent interfaces must have an implementation in all implicit interface implementations -->
    <Rule Id="CA2257" Action="Warning" /> <!-- Members defined on an interface with the 'DynamicInterfaceCastableImplementationAttribute' should be 'static' -->
    <Rule Id="CA2258" Action="Warning" /> <!-- Providing a 'DynamicInterfaceCastableImplementation' interface in Visual Basic is unsupported -->
  </Rules>

  <!-- Custom BuildingBlocks Architecture Rules -->
  <Rules AnalyzerId="BuildingBlocks.CodeAnalysis" RuleNamespace="BuildingBlocks.Rules">
    <!-- Domain Layer Rules -->
    <Rule Id="BB0001" Action="Warning" /> <!-- Domain entities should inherit from Entity<> -->
    <Rule Id="BB0002" Action="Warning" /> <!-- Value objects should inherit from ValueObject -->
    <Rule Id="BB0003" Action="Warning" /> <!-- Use strongly-typed IDs instead of primitives -->
    <Rule Id="BB0004" Action="Warning" /> <!-- Domain services should be stateless -->
    <Rule Id="BB0005" Action="Warning" /> <!-- Domain events should be immutable -->
    
    <!-- Application Layer Rules -->
    <Rule Id="BB0101" Action="Warning" /> <!-- Commands should inherit from CommandBase -->
    <Rule Id="BB0102" Action="Warning" /> <!-- Queries should inherit from QueryBase -->
    <Rule Id="BB0103" Action="Warning" /> <!-- Handlers should implement proper interfaces -->
    <Rule Id="BB0104" Action="Warning" /> <!-- DTOs should not contain business logic -->
    <Rule Id="BB0105" Action="Warning" /> <!-- Use FluentValidation for input validation -->
    
    <!-- Infrastructure Layer Rules -->
    <Rule Id="BB0201" Action="Warning" /> <!-- Repositories should implement domain interfaces -->
    <Rule Id="BB0202" Action="Warning" /> <!-- DbContext should inherit from DbContextBase -->
    <Rule Id="BB0203" Action="Warning" /> <!-- Entity configurations should be separate classes -->
    <Rule Id="BB0204" Action="Warning" /> <!-- Use UnitOfWork for transactions -->
    
    <!-- API Layer Rules -->
    <Rule Id="BB0301" Action="Warning" /> <!-- Controllers should return ApiResponse<T> -->
    <Rule Id="BB0302" Action="Warning" /> <!-- Use proper HTTP status codes -->
    <Rule Id="BB0303" Action="Warning" /> <!-- API endpoints should have proper validation -->
    <Rule Id="BB0304" Action="Warning" /> <!-- Use OpenAPI documentation attributes -->
  </Rules>

</RuleSet> 